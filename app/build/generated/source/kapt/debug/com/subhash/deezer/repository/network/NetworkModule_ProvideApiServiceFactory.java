// Generated by Dagger (https://dagger.dev).
package com.subhash.deezer.repository.network;

import com.google.gson.Gson;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideApiServiceFactory implements Factory<NetworkRepository> {
  private final Provider<OkHttpClient> clientProvider;

  private final Provider<String> urlProvider;

  private final Provider<Gson> gsonProvider;

  public NetworkModule_ProvideApiServiceFactory(Provider<OkHttpClient> clientProvider,
      Provider<String> urlProvider, Provider<Gson> gsonProvider) {
    this.clientProvider = clientProvider;
    this.urlProvider = urlProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public NetworkRepository get() {
    return provideApiService(clientProvider.get(), urlProvider.get(), gsonProvider.get());
  }

  public static NetworkModule_ProvideApiServiceFactory create(Provider<OkHttpClient> clientProvider,
      Provider<String> urlProvider, Provider<Gson> gsonProvider) {
    return new NetworkModule_ProvideApiServiceFactory(clientProvider, urlProvider, gsonProvider);
  }

  public static NetworkRepository provideApiService(OkHttpClient client, String url, Gson gson) {
    return Preconditions.checkNotNull(NetworkModule.provideApiService(client, url, gson), "Cannot return null from a non-@Nullable @Provides method");
  }
}
