// Generated by Dagger (https://dagger.dev).
package com.subhash.deezer.di;

import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.subhash.deezer.DeezerApplication;
import com.subhash.deezer.MainActivity;
import com.subhash.deezer.repository.network.NetworkModule_DeezerUrlFactory;
import com.subhash.deezer.repository.network.NetworkModule_ProvideApiServiceFactory;
import com.subhash.deezer.repository.network.NetworkModule_ProvideGsonFactory;
import com.subhash.deezer.repository.network.NetworkModule_ProvideOkHttpClientFactory;
import com.subhash.deezer.repository.network.NetworkRepository;
import com.subhash.deezer.ui.UiModule_AlbumFragment$app_debug;
import com.subhash.deezer.ui.UiModule_MainActivity$app_debug;
import com.subhash.deezer.ui.UiModule_SearchFragment$app_debug;
import com.subhash.deezer.ui.UiModule_TracksFragment$app_debug;
import com.subhash.deezer.ui.album.AlbumFragment;
import com.subhash.deezer.ui.album.AlbumFragment_MembersInjector;
import com.subhash.deezer.ui.album.AlbumViewModel;
import com.subhash.deezer.ui.album.AlbumViewModel_Factory;
import com.subhash.deezer.ui.search.SearchFragment;
import com.subhash.deezer.ui.search.SearchFragment_MembersInjector;
import com.subhash.deezer.ui.search.SearchViewModel;
import com.subhash.deezer.ui.search.SearchViewModel_Factory;
import com.subhash.deezer.ui.tracks.TracksFragment;
import com.subhash.deezer.ui.tracks.TracksFragment_MembersInjector;
import com.subhash.deezer.ui.tracks.TracksViewModel;
import com.subhash.deezer.ui.tracks.TracksViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<UiModule_MainActivity$app_debug.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<UiModule_SearchFragment$app_debug.SearchFragmentSubcomponent.Factory> searchFragmentSubcomponentFactoryProvider;

  private Provider<UiModule_AlbumFragment$app_debug.AlbumFragmentSubcomponent.Factory> albumFragmentSubcomponentFactoryProvider;

  private Provider<UiModule_TracksFragment$app_debug.TracksFragmentSubcomponent.Factory> tracksFragmentSubcomponentFactoryProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<NetworkRepository> provideApiServiceProvider;

  private Provider<SearchViewModel> searchViewModelProvider;

  private Provider<AlbumViewModel> albumViewModelProvider;

  private Provider<TracksViewModel> tracksViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(DeezerApplication arg0) {

    initialize(arg0);
  }

  public static AppComponent.Builder factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SearchFragment.class, (Provider) searchFragmentSubcomponentFactoryProvider).put(AlbumFragment.class, (Provider) albumFragmentSubcomponentFactoryProvider).put(TracksFragment.class, (Provider) tracksFragmentSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final DeezerApplication arg0) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<UiModule_MainActivity$app_debug.MainActivitySubcomponent.Factory>() {
      @Override
      public UiModule_MainActivity$app_debug.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.searchFragmentSubcomponentFactoryProvider = new Provider<UiModule_SearchFragment$app_debug.SearchFragmentSubcomponent.Factory>() {
      @Override
      public UiModule_SearchFragment$app_debug.SearchFragmentSubcomponent.Factory get() {
        return new SearchFragmentSubcomponentFactory();}
    };
    this.albumFragmentSubcomponentFactoryProvider = new Provider<UiModule_AlbumFragment$app_debug.AlbumFragmentSubcomponent.Factory>() {
      @Override
      public UiModule_AlbumFragment$app_debug.AlbumFragmentSubcomponent.Factory get() {
        return new AlbumFragmentSubcomponentFactory();}
    };
    this.tracksFragmentSubcomponentFactoryProvider = new Provider<UiModule_TracksFragment$app_debug.TracksFragmentSubcomponent.Factory>() {
      @Override
      public UiModule_TracksFragment$app_debug.TracksFragmentSubcomponent.Factory get() {
        return new TracksFragmentSubcomponentFactory();}
    };
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create());
    this.provideGsonProvider = DoubleCheck.provider(NetworkModule_ProvideGsonFactory.create());
    this.provideApiServiceProvider = DoubleCheck.provider(NetworkModule_ProvideApiServiceFactory.create(provideOkHttpClientProvider, NetworkModule_DeezerUrlFactory.create(), provideGsonProvider));
    this.searchViewModelProvider = SearchViewModel_Factory.create(provideApiServiceProvider);
    this.albumViewModelProvider = AlbumViewModel_Factory.create(provideApiServiceProvider);
    this.tracksViewModelProvider = TracksViewModel_Factory.create(provideApiServiceProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3).put(SearchViewModel.class, (Provider) searchViewModelProvider).put(AlbumViewModel.class, (Provider) albumViewModelProvider).put(TracksViewModel.class, (Provider) tracksViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(DeezerApplication arg0) {
    injectDeezerApplication(arg0);}

  private DeezerApplication injectDeezerApplication(DeezerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory extends AppComponent.Builder {
    @Override
    public AppComponent create(DeezerApplication arg0) {
      Preconditions.checkNotNull(arg0);
      return new DaggerAppComponent(arg0);
    }
  }

  private final class MainActivitySubcomponentFactory implements UiModule_MainActivity$app_debug.MainActivitySubcomponent.Factory {
    @Override
    public UiModule_MainActivity$app_debug.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements UiModule_MainActivity$app_debug.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class SearchFragmentSubcomponentFactory implements UiModule_SearchFragment$app_debug.SearchFragmentSubcomponent.Factory {
    @Override
    public UiModule_SearchFragment$app_debug.SearchFragmentSubcomponent create(
        SearchFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SearchFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SearchFragmentSubcomponentImpl implements UiModule_SearchFragment$app_debug.SearchFragmentSubcomponent {
    private SearchFragmentSubcomponentImpl(SearchFragment arg0) {

    }

    @Override
    public void inject(SearchFragment arg0) {
      injectSearchFragment(arg0);}

    private SearchFragment injectSearchFragment(SearchFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      SearchFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AlbumFragmentSubcomponentFactory implements UiModule_AlbumFragment$app_debug.AlbumFragmentSubcomponent.Factory {
    @Override
    public UiModule_AlbumFragment$app_debug.AlbumFragmentSubcomponent create(AlbumFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new AlbumFragmentSubcomponentImpl(arg0);
    }
  }

  private final class AlbumFragmentSubcomponentImpl implements UiModule_AlbumFragment$app_debug.AlbumFragmentSubcomponent {
    private AlbumFragmentSubcomponentImpl(AlbumFragment arg0) {

    }

    @Override
    public void inject(AlbumFragment arg0) {
      injectAlbumFragment(arg0);}

    private AlbumFragment injectAlbumFragment(AlbumFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      AlbumFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class TracksFragmentSubcomponentFactory implements UiModule_TracksFragment$app_debug.TracksFragmentSubcomponent.Factory {
    @Override
    public UiModule_TracksFragment$app_debug.TracksFragmentSubcomponent create(
        TracksFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new TracksFragmentSubcomponentImpl(arg0);
    }
  }

  private final class TracksFragmentSubcomponentImpl implements UiModule_TracksFragment$app_debug.TracksFragmentSubcomponent {
    private TracksFragmentSubcomponentImpl(TracksFragment arg0) {

    }

    @Override
    public void inject(TracksFragment arg0) {
      injectTracksFragment(arg0);}

    private TracksFragment injectTracksFragment(TracksFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      TracksFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
